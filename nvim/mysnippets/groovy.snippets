snippet post "post" b
post {
        always {
            echo 'This will always run'
        }
        success {
            echo 'This will run only if successful'
        }
        failure {
            echo 'This will run only if failed'
        }
        unstable {
            echo 'This will run only if the run was marked as unstable'
        }
        changed {
            echo 'This will run only if the state of the Pipeline has changed'
            echo 'For example, if the Pipeline was previously failing but is now successful'
        }
    }
endsnippet


snippet start "Description" b
library "common-code@${'master'}" _

pipeline {
    agent { label 'build_machine' }

    environment {
        REPO_NAME = utility.get_git_repo_name()
        REGISTRY = globals.get_docker_internal_artifactory_repository()
        PRODUCTION_REGISTRY = globals.get_docker_production_artifactory_repository()
        GIT_BRANCH = utility.get_git_branch_edited(env.BRANCH_NAME)
        IMAGE_NAME = "${REGISTRY}/${REPO_NAME}/${REPO_NAME}:${GIT_BRANCH}_${env.BUILD_NUMBER}"
        NUM_OLD_BUILDS = globals.get_num_oldbuild()

        // Variables specific to this repo
        BASE_IMAGE = "${REGISTRY}/ghbibaseimage:2.0"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr:env.NUM_OLD_BUILDS))
    }

    stages {
        stage('CheckNode') {
            steps {
                isUnix()
            }
        }

        stage('Build package') {
            steps {
                script {
                    utility.login_docker_internal_artifactory_repository()
                    withCredentials(
                        [usernamePassword(credentialsId: 'jenkins_artifactory_user',
                                          passwordVariable: 'ARTIFACTORY_PASSWORD',
                                          usernameVariable: 'ARTIFACTORY_USERNAME')]) {
                        sh 'hostname && chmod -R 777 ${WORKSPACE}'
                        sh '''
                            echo 'Process starting for : ${REPO_NAME}/${GIT_BRANCH}'
                            cmd="cd /argentite && bash build.sh"
                            docker pull ${BASE_IMAGE}
                            docker build --rm=false -t ${IMAGE_NAME} -f setup/Dockerfile .
                            docker run --rm --user $(id -u):$(id -g) \
                                -e "ARTIFACTORY_USERNAME=${ARTIFACTORY_USERNAME}" \
                                -e "ARTIFACTORY_PASSWORD=${ARTIFACTORY_PASSWORD}" \
                                -v ${WORKSPACE}:/argentite ${IMAGE_NAME} \
                                bash -c "$cmd"
                        '''
                    }
                }
            }
        }
        stage('Build docs') {
            steps {
                script {
                    utility.login_docker_internal_artifactory_repository()
                    withCredentials(
                        [usernamePassword(credentialsId: 'jenkins_artifactory_user',
                                        passwordVariable: 'ARTIFACTORY_PASSWORD',
                                        usernameVariable: 'ARTIFACTORY_USERNAME')]) {
                        sh '''
                            if [ "${BRANCH_NAME}" = "dev" ]; then
                                cmd="cd /argentite && make _docs"
                                docker run --rm \
									--user $(id -u):$(id -g) \
                                    -e "ARTIFACTORY_USERNAME=${ARTIFACTORY_USERNAME}" \
                                    -e "ARTIFACTORY_PASSWORD=${ARTIFACTORY_PASSWORD}" \
                                    -v ${WORKSPACE}:/argentite \
                                    -v /ghess/screening/docs:/ghess/screening/docs \
									${IMAGE_NAME} \
                                    bash -c "$cmd"

                                cmd="cd /argentite && make docs-publish"
                                docker run --rm \
                                    -e "ARTIFACTORY_USERNAME=${ARTIFACTORY_USERNAME}" \
                                    -e "ARTIFACTORY_PASSWORD=${ARTIFACTORY_PASSWORD}" \
                                    -v ${WORKSPACE}:/argentite \
                                    -v /ghess/screening/docs:/ghess/screening/docs \
									${IMAGE_NAME} \
                                    bash -c "$cmd"
                            fi
                        '''
                    }

                    // get package version
                    env.PACKAGE_VERSION = sh(
                        script: 'grep ^version ${WORKSPACE}/pyproject.toml | cut -f3 -d" " | tr -d \'"\'| tr -d "\n"',
                        returnStdout: true)

                    sh '''
                        echo "Package version: ${PACKAGE_VERSION}"
                    '''

                }
            }
        }
        stage('Push package') {
            steps {
                script {
                    utility.login_docker_internal_artifactory_repository()
                    withCredentials(
                        [usernamePassword(credentialsId: 'jenkins_artifactory_user',
                                          passwordVariable: 'ARTIFACTORY_PASSWORD',
                                          usernameVariable: 'ARTIFACTORY_USERNAME')]) {
                        sh '''
                            if [ "${BRANCH_NAME}" = "dev" ]; then
                                # publish command
                                cmd="cd /argentite && bash release.sh"
                                # publish to artifactory pypi
                                docker run --rm --user $(id -u):$(id -g) \
                                    -e "ARTIFACTORY_USERNAME=${ARTIFACTORY_USERNAME}" \
                                    -e "ARTIFACTORY_PASSWORD=${ARTIFACTORY_PASSWORD}" \
                                    -v ${WORKSPACE}:/argentite ${IMAGE_NAME} \
                                    bash -c "$cmd"
                            fi
                        '''
                       }

                    // get package version
                    env.PACKAGE_VERSION = sh(
                        script: 'grep ^version ${WORKSPACE}/pyproject.toml | cut -f3 -d" " | tr -d \'"\'| tr -d "\n"',
                        returnStdout: true)

                    sh '''
                        echo "Package version: ${PACKAGE_VERSION}"
                    '''

                }
            }
        }
        stage('Tag and Push To Github') {
            when {
                expression { return (env.BRANCH_NAME == "dev") }
            }
            steps {
                script {
                    utility.tag_git_repo("${env.PACKAGE_VERSION}")
                }
            }
        }
    }
    post {
        success {
            sendNotifications 'SUCCESS'
        }
        failure {
            sendNotifications 'FAILED'
            emailext(subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                     body: """<p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                     <p>Check console output at
                     "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>""",
                     recipientProviders: [[$class: 'CulpritsRecipientProvider']],
                     from: "jenkins@guardanthealth.com"
                    )
        }
    }
}
endsnippet
