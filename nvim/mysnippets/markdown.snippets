snippet readme "Description" b
# ${1}


## Installation

### Development setup


## Documentation

## Running Tests

To run all tests, use

\`\`\`bash
poetry run pytest -s -v tests
\`\`\`


\`\`\`bash
make test
\`\`\`

## Contributors

## Usage/Examples
endsnippet

snippet !pre "Preamble" b
---
jupyter:
  jupytext:
    text_representation:
      extension: .md
      format_name: markdown
      format_version: '1.2'
      jupytext_version: 1.8.0
  kernelspec:
    display_name: Python 3
    language: python
    name: python3
---
endsnippet

snippet ``` "Description" bA
\`\`\`
$0
\`\`\`
endsnippet

snippet src "Description" b
\`\`\`
$0
\`\`\`
endsnippet

snippet ppp "separator" b
\`\`\`

\`\`\`
$0
endsnippet

snippet !tb1 "Description" b
└── django
endsnippet


snippet designdoc "Description" b
# Title

# People

<!-- the list of people planning to work on this project and stakeholders -->

# Overview

<!-- A high level summary that every engineer at the company should understand and use to decide if it’s useful for them to read the rest of the doc. It should be 3 paragraphs max. -->

# Context

<!-- A description of the problem at hand, why this project is necessary, what people need to know to assess this project, and how it fits into the technical strategy, product strategy, or the team’s quarterly goals. -->


# Goals and Non-Goals

## Goals

The Goals section should: describe the user-driven impact of yor project — where your user might be another engineering team or even another technical system specify how to measure success using metrics — bonus points if you can link to a dashboard that tracks those metrics

## Non-Goals

<!-- Non-Goals are equally important to describe which problems you won’t be fixing so everyone is on the same page. -->

# Milestones

<!-- A list of measurable checkpoints, so your PM and your manager’s manager can skim it and know roughly when different parts of the project will be done. -->

<!-- break the project down into major user-facing milestones if the project is more than 1 month long. -->

<!-- Use calendar dates so you take into account unrelated delays, vacations, meetings, and so on. It should look something like this: -->

<!-- Start Date: June 7, 2018 -->
<!-- Milestone 1 — New system MVP running in dark-mode: June 28, 2018 -->
<!-- Milestone 2 - Retire old system: July 4th, 2018 -->
<!-- End Date: Add feature X, Y, Z to new system: July 14th, 2018 -->

<!-- Add an [Update] subsection here if the ETA of some of these milestone changes, so the stakeholders can easily see the most up-to-date estimates. -->

# Existing Solution

In addition to describing the current implementation, you should also walk through a high level example flow to illustrate how users interact with this system and/or how data flow through it.  A user story is a great way to frame this. Keep in mind that your system might have different types of users with different use cases.

# Proposed Solution

Some people call this the Technical Architecture section. Again, try to walk through a user story to concretize this. Feel free to include many sub-sections and diagrams.

Provide a big picture first, then fill in lots of details. Aim for a world where you can write this, then take a vacation on some deserted island, and another engineer on the team can just read it and implement the solution as you described.

# Alternative Solutions

What else did you consider when coming up with the solution above? What are the pros and cons of the alternatives? Have you considered buying a 3rd-party solution — or using an open source one — that solves this problem as opposed to building your own?

# Testability, Monitoring and Alerting

<!-- I like including this section, because people often treat this as an afterthought or skip it all together, and it almost always comes back to bite them later when things break and they have no idea how or why. -->


# Cross-Team Impact

## Devops Burden

<!-- How will this increase on call and dev-ops burden? -->

## Costs

<!-- How much money will it cost? -->
<!-- Does it cause any latency regression to the system? -->

## Security Concerns
<!-- Does it expose any security vulnerabilities? -->
<!-- What are some negative consequences and side effects? -->
<!-- How might the support team communicate this to the customers? -->

# Open Questions

<!-- Any open issues that you aren’t sure about, contentious decisions that you’d like readers to weigh in on, suggested future work, and so on. A tongue-in-cheek name for this section is the “known unknowns”. -->

# Detailed Scoping and Timeline

<!-- This section is mostly going to be read only by the engineers working on this project, their tech leads, and their managers. Hence this section is at the end of the doc. -->

<!-- Essentially, this is the breakdown of how and when you plan on executing each part of the project. -->
endsnippet
