#synonsis
# calculator
# extract
# cd_func
# fwak
# up
# wiki
# marks


# This function is to be used in PS1
# example:  PS1="\e[1;31m[\!][\d,\@] \u@\[\033]0;\h:\W\007\]\h: \w]  \$(parse_git_branch)\e[m\n  \[\e]0;ibm\a\] ===> "
function parse_git_branch {
   git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}


# calculator
calc() {
  echo $@| tr -d ',' | perl -ne 'print eval . "\n"'
}

# b) function cd_func
# This function defines a 'cd' replacement function capable of keeping,
# displaying and accessing history of visited directories, up to 10 entries.
# To use it, uncomment it, source this file and try 'cd --'.
# acd_func 1.0.5, 10-nov-2004
# Petar Marinov, http:/geocities.com/h2428, this is public domain
cd_func ()
{
  local x2 the_new_dir adir index
  local -i cnt

  if [[ $1 ==  "--" ]]; then
    dirs -v
    return 0
  fi

  # support -P flag in cd
  if [[ $1 ==  "-P" ]]; then
	shift
	pushd "$1" > /dev/null
	pushd $(pwd -P) > /dev/null
	return 0
  fi

  the_new_dir=$1
  [[ -z $1 ]] && the_new_dir=$HOME

  if [[ ${the_new_dir:0:1} == '-' ]]; then
    #
    # Extract dir N from dirs
    index=${the_new_dir:1}
    [[ -z $index ]] && index=1
    adir=$(dirs +$index)
    [[ -z $adir ]] && return 1
    the_new_dir=$adir
  fi

  #
  # '~' has to be substituted by ${HOME}
  [[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"

  #
  # Now change to the new dir and add to the top of the stack
  pushd "${the_new_dir}" > /dev/null
  [[ $? -ne 0 ]] && return 1
  the_new_dir=$(pwd)

  #
  # Trim down everything beyond 11th entry
  popd -n +11 2>/dev/null 1>/dev/null

  #
  # Remove any other occurence of this dir, skipping the top of the stack
  for ((cnt=1; cnt <= 10; cnt++)); do
    x2=$(dirs +${cnt} 2>/dev/null)
    [[ $? -ne 0 ]] && return 0
    [[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
    if [[ "${x2}" == "${the_new_dir}" ]]; then
      popd -n +$cnt 2>/dev/null 1>/dev/null
      cnt=cnt-1
    fi
  done

  return 0
}

cd_func_decorated() {
  cd_func "$@"
  if [[ "$1" != "--" ]]; then
    #ls -Xlhp --group-directories-first 2> /dev/null || gls -Xlhp --group-directories-first
    git status -s 2> /dev/null
  fi

}

alias cd=cd_func_decorated

pd() {
  project_name="$1"

  if [[ -z $project_name ]]; then
    command cd $HOME/prj/ && cd $(command ls | fzf)
  else
    command cd $HOME/prj/ && cd "$project_name"
  fi
}

export -f pd

srd() {
  project_name="$1"

  if [[ -z $project_name ]]; then
    command cd $HOME/src/ && cd $(command ls | fzf)
  else
    command cd $HOME/src/ && cd "$project_name"
  fi
}

export -f srd
alias sd="srd"
alias ss="srd"
export -f pd


#alias pd=pd_run

#--------------------------------------------------
extract () {
   if [ -f $1 ] ; then
       case $1 in
           *.tar.bz2)   tar xvjf $1    ;;
           *.tar.gz)    tar xvzf $1    ;;
           *.bz2)       bunzip2 $1     ;;
           *.rar)       unrar x $1       ;;
           *.gz)        gunzip $1      ;;
           *.tar)       tar xvf $1     ;;
           *.tbz2)      tar xvjf $1    ;;
           *.tgz)       tar xvzf $1    ;;
           *.zip)       unzip $1       ;;
           *.Z)         uncompress $1  ;;
           *.7z)        7z x $1        ;;
           *)           echo "don't know how to extract '$1'..." ;;
       esac
   else
       echo "'$1' is not a valid file!"
   fi
 }

#fawk
 function fawk {
      first="awk '{print "
          last="}'"
              cmd="${first}\$${1}${last}"
                  eval $cmd
}

#up
up(){
    local d=""
      limit=$1
        for ((i=1 ; i <= limit ; i++))
              do
                      d=$d/..
                          done
                            d=$(echo $d | sed 's/^\///')
                              if [ -z "$d" ]; then
                                    d=..
                                      fi
                                        cd $d
}

#wiki
wiki() { dig +short txt $1.wp.dg.cx; }


 # a) function settitle
settitle ()
 {
 echo -ne "\e]2;$@\a\e]1;$@\a";
}
#ls what is most relevant right now
function lt() { ls -ltrsa "$@" | tail; }
#useful find name
function fname() { find . -iname "*$@*"; }

#psgrep
function psgrep() { ps axuf | grep -v grep | grep "$@" -i --color=auto; }

#qsub
# #function qs {
#     mem=$1; shift
#     hours=$1; shift
#     message=$(qsub -l mem=${mem}G,time=${hours}:: "$@")
#     echo $message
#     jid=$( echo $message | cut -f3 -d" " )
# }
function bs {
    mem=$1; shift
    hours=$1; shift
    message=$(qsub -b y -j n -l mem=${mem}G,time=${hours}:: "$@")
    echo $message
    jid=$( echo $message | cut -f3 -d" " )
}
function qsm {
    mem=$1; shift
    hours=$1; shift
    message=$(qsub -m ea -l mem=${mem}G,time=${hours}:: "$@")
    echo $message
    echo "Email will be sent"
    jid=$( echo $message | cut -f3 -d" " )
}
function bsm {
    mem=$1; shift
    hours=$1; shift
    message=$(qsub -m ea -b y -j n -l mem=${mem}G,time=${hours}:: "$@")
    echo $message
    echo "Email will be sent"
    jid=$( echo $message | cut -f3 -d" " )
}

# vim()
# {
#     local STTYOPTS="$(stty --save)"
#     stty stop '' -ixoff
#     command vim "$@"
#     stty "$STTYOPTS"
# }

export MARKPATH=$HOME/.marks
function jump {
    unjump_dir=$(pwd)
    cd $MARKPATH/$1 2>/dev/null || echo "No such mark: $1"
    cd $(readlink -m $(pwd))
    ls -lh
}

function unjump {
    if [[ -z $unjump_dir ]]; then
	echo "There is nowhere to un'jump to!"
    else
	cd $unjump_dir
	ls -lh
    fi
}
function mark {
    mkdir -p $MARKPATH; ln -sf $(pwd) $MARKPATH/$1
}
function unmark {
    rm -i $MARKPATH/$1
}
function marks {
    ls -l $MARKPATH | sed 's/  / /g' | cut -d' ' -f9- | sed 's/ -/\t-/g' && echo
}



colors() {
    local fgc bgc vals seq0

    printf "Color escapes are %s\n" '\e[${value};...;${value}m'
    printf "Values 30..37 are \e[33mforeground colors\e[m\n"
    printf "Values 40..47 are \e[43mbackground colors\e[m\n"
    printf "Value  1 gives a  \e[1mbold-faced look\e[m\n\n"

    # foreground colors
    for fgc in {30..37}; do
	# background colors
	for bgc in {40..47}; do
	    fgc=${fgc#37} # white
	    bgc=${bgc#40} # black

	    vals="${fgc:+$fgc;}${bgc}"
	    vals=${vals%%;}

	    seq0="${vals:+\e[${vals}m}"
	    printf "  %-9s" "${seq0:-(default)}"
	    printf " ${seq0}TEXT\e[m"
	    printf " \e[${vals:+${vals+$vals;}}1mBOLD\e[m"
	done
	echo; echo
    done
}

# inspired by `bd`: https://github.com/vigneshwaranr/bd
function _up() {
    local rx updir
    rx=$(ruby -e "print '$1'.gsub(/\s+/,'').split('').join('.*?')")
    updir=`echo $PWD | ruby -e "print STDIN.read.sub(/(.*\/${rx}[^\/]*\/).*/i,'\1')"`
    echo -n "$updir"
}

function up() {
    if [ $# -eq 0 ]; then
	echo "up: traverses up the current working directory to first match and cds to it"
	echo "You need an argument"
    else
	cd $(_up "$@")
    fi
}

function history_original() {
    export HISTFILE=$HOME/.bash_history
}

function histgrep ()
{
  grep -r "$@" ~/.history
    history | grep "$@"
}

fbr() {
  local branches branch
  branches=$(git branch -vv) &&
  branch=$(echo "$branches" | fzf +m) &&
  git checkout $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
}


fco_preview() {
  local tags branches target
  tags=$(
git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
  branches=$(
git branch --all | grep -v HEAD |
sed "s/.* //" | sed "s#remotes/[^/]*/##" |
sort -u | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
  target=$(
(echo "$tags"; echo "$branches") |
    fzf --no-hscroll --no-multi --delimiter="\t" -n 2 \
        --ansi --preview="git log -200 --pretty=format:%s $(echo {+2..} |  sed 's/$/../' )" ) || return
  git checkout $(echo "$target" | awk '{print $2}')
}

# fshow - git commit browser
fshow() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF"
}




# fshow_preview - git commit browser with previews
fshow_preview() {
    local _gitLogLineToHash="echo {} | grep -o '[a-f0-9]\{7\}' | head -1"
    local _viewGitLogLine="$_gitLogLineToHash | xargs -I % sh -c 'git show --color=always % | diff-so-fancy'"
    git log --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr% C(auto)%an" "$@" | \
        fzf --no-sort --reverse --tiebreak=index --no-multi \
            --ansi --preview "$_gitLogLineToHash | xargs -I % sh -c 'git show --color=always % | diff-so-fancy'" \
                --header "enter to view, alt-y to copy hash" \
                --bind "enter:execute:echo {} | grep -o '[a-f0-9]\{7\}' | head -1| xargs -I % sh -c 'git show --color=always % | diff-so-fancy'| less -R" \
                --bind "alt-y:execute:echo {} | grep -o '[a-f0-9]\{7\}' | head -1| xclip"
}

fcs() {
  local commits commit
  commits=$(git log --color=always --pretty=oneline --abbrev-commit --reverse) &&
  commit=$(echo "$commits" | fzf --tac +s +m -e --ansi --reverse) &&
  echo -n $(echo "$commit" | sed "s/ .*//")
}

# fstash - easier way to deal with stashes
# type fstash to get a list of your stashes
# enter shows you the contents of the stash
# ctrl-d shows a diff of the stash against your current HEAD
# ctrl-b checks the stash out as a branch, for easier merging
fstash() {
  local out q k sha
  while out=$(
    git stash list --pretty="%C(yellow)%h %>(14)%Cgreen%cr %C(blue)%gs" |
    fzf --ansi --no-sort --query="$q" --print-query \
        --expect=ctrl-d,ctrl-b);
  do
    mapfile -t out <<< "$out"
    q="${out[0]}"
    k="${out[1]}"
    sha="${out[-1]}"
    sha="${sha%% *}"
    [[ -z "$sha" ]] && continue
    if [[ "$k" == 'ctrl-d' ]]; then
      git diff $sha
    elif [[ "$k" == 'ctrl-b' ]]; then
      git stash branch "stash-$sha" $sha
      break;
    else
      git stash show -p $sha
    fi
  done
}


# Codi
# Usage: codi [filetype] [filename]
codi() {
  local syntax="${1:-python}"
  shift
  vim -c \
    "let g:startify_disable_at_vimenter = 1 |\
    set bt=nofile ls=0 noru nonu nornu |\
    hi ColorColumn ctermbg=NONE |\
    hi VertSplit ctermbg=NONE |\
    hi NonText ctermfg=0 |\
    Codi $syntax" "$@"
}

gprj() {
	cd $HOME/prj/$(git rev-parse --abbrev-ref HEAD)
}
fs() {
	local -r fmt='#{session_id}:|#S|(#{session_attached} attached)'
	{ tmux display-message -p -F "$fmt" && tmux list-sessions -F "$fmt"; } \
		| awk '!seen[$1]++' \
		| column -t -s'|' \
		| fzf -q '$' --reverse --prompt 'switch session: ' -1 \
		| cut -d':' -f1 \
		| xargs tmux switch-client -t
}
export -f fs


# https://junegunn.kr/2015/04/browsing-chrome-history-with-fzf/
c() {
  local cols sep
  cols=$(( COLUMNS / 3 ))
  sep='{::}'

  cp -f ~/Library/Application\ Support/Google/Chrome/Default/History /tmp/h

  sqlite3 -separator $sep /tmp/h \
    "select substr(title, 1, $cols), url
     from urls order by last_visit_time desc" |
  awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
  fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs open
}

PS1_toggle() {
	if [[ $PS1 == '$ ' ]]; then
		export PS1=$PS1_PREVIOUS
	else
		export PS1_PREVIOUS=$PS1
		export PS1='$ '
	fi
}

export vim_sessions=$HOME/.config/vim

_vim_sessions(){
    local cur=${COMP_WORDS[COMP_CWORD]}
    COMPREPLY=( $(compgen -W "$(ls ${vim_sessions})" -- $cur) )
}

complete -F _vim_sessions vs

vs(){
    # open vim and source session Session.vim or parameter1.vim

    mkdir -p ${vim_sessions}

    # use Session.vim if no param given
    if [ "$#" -ne 1 ]; then
        SESSION_NAME=Session.vim
    else
        SESSION_NAME=$1
    fi


    SESSION_PATH=$PWD/$SESSION_NAME

    if [[ ! -e $SESSION_PATH ]]; then
		SESSION_PATH=${vim_sessions}/$SESSION_NAME
    fi

    if [[ ! -f $SESSION_PATH ]]; then
        # make session file if it does not exist
        vim -c "Obsession $SESSION_PATH"
    else
        # source session file if it exists
        vim -S $SESSION_PATH
    fi
}
