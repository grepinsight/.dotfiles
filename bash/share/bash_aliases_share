##################################################
function get_platform
{
    if [[ $(uname) == "Darwin" ]];then
        echo "mac"
    else
        echo "linux"
    fi
}
export -f get_platform > /dev/null
# Administrative


if [[ $(get_platform) == mac ]]; then
	alias rdlk="greadlink -m"
else
	alias rdlk="readlink -m"
fi

alias reload="source $HOME/.dotfiles/bash/bashrc_init"
alias reload_alias_share="source $HOME/.dotfiles/bash/share/bash_aliases_share"
alias reload_alias_local="source $HOME/.dotfiles/bash/local/bash_aliases_local"
alias reload_bashrc="source $HOME/.bashrc"
alias lo="exit"
alias bd="exit" # as in  buffer delete from vim.

## Fly - will fly to the directory
_fly() {
  if [[ -z $1 ]]; then
    echo "No argument provided!"
  else
    cd $(dirname $1)

  fi
}

alias fly=_fly

function mkcd
{
  dir="$*";
  mkdir -p "$dir" && cd "$dir";
}

alias nosym='cd $(pwd -P)'
##################################################
# Dotfiles related

bash_dotfile_dir="${HOME}/.dotfiles/bash"
alias dotpull="cd ${HOME}/.dotfiles/ && git pull && cd -"
alias bpl="$EDITOR ${bash_dotfile_dir}/local/bash_paths_local"
alias bsl="$EDITOR ${bash_dotfile_dir}/local/bash_settings_local"
alias bps="$EDITOR ${bash_dotfile_dir}/share/bash_paths_share"
alias bas="$EDITOR ${bash_dotfile_dir}/share/bash_aliases_share"
alias bss="$EDITOR ${bash_dotfile_dir}/share/bash_settings_share"
alias bsa="$EDITOR ${bash_dotfile_dir}/share/bash_aliases_share"
alias bal="$EDITOR ${bash_dotfile_dir}/local/bash_aliases_local"
alias bla="$EDITOR ${bash_dotfile_dir}/local/bash_aliases_local"
alias bil="$EDITOR ${bash_dotfile_dir}/local/bash_inirun_local"
alias bfs="$EDITOR ${bash_dotfile_dir}/share/bash_functions_share"
alias bfl="$EDITOR ${bash_dotfile_dir}/local/bash_functions_local"

# source aliases
alias s_bpl="source $HOME/.dotfiles/bash/local/bash_paths_local"
alias s_bsl="source $HOME/.dotfiles/bash/local/bash_settings_local"
alias s_bal="source $HOME/.dotfiles/bash/local/bash_aliases_local"
alias s_bps="source $HOME/.dotfiles/bash/share/bash_paths_share"
alias s_bss="source $HOME/.dotfiles/bash/share/bash_settings_share"
alias s_bsl="source $HOME/.dotfiles/bash/share/bash_aliases_share"




##################################################
# Utilities

# Average
alias avg="awk 'BEGIN{sum=0;line=0};{sum+=\$1;line+=1};END{print sum/line}'"

# Ag related
alias agx="ag --tex"
alias agr="ag --r"
##################################################
# Ls related
platform='unknown'
unamestr=`uname`
if [[ "$unamestr" == 'Linux' ]]; then
   platform='linux'
elif [[ "$unamestr" == 'Darwin' ]]; then
   platform='Darwin'
fi


if [[ $platform == 'Darwin' ]]; then
   alias ls="gls"
   command -v exa > /dev/null && alias ls="exa"
   command -v lsd > /dev/null && alias ls="lsd"

   alias ll='ls -G -lh'
   # if exa is avalable use that
   command -v exa > /dev/null && alias ll="exa -l -g" # list, show group
   command -v lsd > /dev/null && alias ll="lsd -l --timesort -r --date +%Y-%m-%d"
   alias lll='ls -G -lh'
else
    alias ls='ls --color=auto'
	alias ll='ls -lh'
	alias ldesc='ls -lh | desc'
	#alias ld='ls -lh | desc'
	#alias lll='ls -lh'
	alias lll='find . -maxdepth 1 -type l | xargs -i ls -lh {} --color'
	alias rip_color_code='sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g"'
	alias rdlk="readlink -m"
	alias vdir='ls --color=auto --format=long'
fi

# If Ack exists
if which ack > /dev/null 2>&1; then
    alias lpy="ack -f -n --python | xargs -i ls -lh --color {}"  # list python file
fi

## long list format - llt?([dfx])
###  t - sort by time
###  d - directory
###  f - file
###  x - separated


### llf - ll, files only
alias llf='ls -lh -F | grep -v /'
alias ls2="ls -Xlhp --group-directories-first"
alias cls="command ls"

### lld - ll, directories only
alias lld='ls -l -d */'

### llsep - ll, separate group and files
alias llsep='ls -l --group-directories-first'

### llt  - ll, sort by time
alias llt='ls -lh -tr'
command -v exa > /dev/null && alias llt="exa --sort=time -l"
command -v exa > /dev/null && alias lltg="exa --sort=time -l --git"
command -v lsd > /dev/null && alias llt2="lsd -tr --total-size -l"


### lltd - ll, sort by time, directories only
alias lltd='ls -lh -tr -d */'

### lltf - ll, sort by time, files only
alias lltf='ls -lh -tr -F | grep -v /'

### llx - ll, sort by filetype
alias llx='ls -lh -X'

alias llta='ls -lhtr --group-directories-first -a'


alias la='ls -Al'                              # all but . and ..
alias lat='ls -Altr '
alias ltd='ls -lhtr | desc'
alias lx='ls -lhtrX'
alias ld='ls -dl */'  # Directories only
alias ld1='ls -d1 */' # Directories only -1
alias lm="ls -lh | awk '\$3==\"akl2140\"'"
alias lst='ls -lh | sort -k1,1'
alias lstr='ls -lthr'
alias dir='ls --format=vertical'

##################################################

alias df='df -h'
alias du='du -h'
alias du_dir='ls -d */ | xargs -i echo "du -sh {}" | bash | sort -hr'
alias diskspace="du -S | sort -n -r |more"
alias folders="find . -maxdepth 1 -type d -print | xargs du -sk | sort -rn"
alias whereami='readlink -m .'

##################################################
## Navigating File system

alias ..="cd ..;ls -lh"
alias ...="cd ../..;ls -lh"
alias ....="cd ../../..;ls -lh"
alias .....="cd ../../../..;ls -lh"


ls_thor() {
    if command -v lsd > /dev/null 2>&1; then
        lsd -l --timesort -r --date +%Y-%m-%d
    else
        ls -thor
    fi
}

function cd_fzf() {
	dir_to_go_to=$(/bin/ls -d */ | strip_color | fzf)

	if [[ $? == 0  ]]; then
		cd ${dir_to_go_to}
		pwd -P
		ls_thor
	fi
}

function cd_fzf_recursive() {
	dir_to_go_to=$(fd -t d | strip_color | fzf)

	if [[ $? == 0  ]]; then
		cd ${dir_to_go_to}
		pwd -P
		ls_thor
	fi
}

export -f cd_fzf > /dev/null
alias cdd="cd_fzf; "
alias cddr="cd_fzf_recursive; "


##################################################
# Grep/Ack related

alias acki="ack -i"

## Add color by default
alias grep='grep --color'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'

## Grep shortcut
alias gp='grep'


alias lgrep='ls |grep'
alias llgrep='ls -lhtr |grep'

## Grep ignorecase
alias grepi="grep -i"

alias hgrep='history | grep'
alias fcat='xargs grep ""'


alias uniqc="uniq -c | sort -k2,2 | awk '{print $1\"\t\"$2}'"

##################################################
# Git related

alias cdg='cd $(git rev-parse --show-toplevel)' # go to git root directory
alias root='cd $(git rev-parse --show-toplevel)' # go to git root directory
alias cdr='cd $(git rev-parse --show-toplevel)' # go to git root directory

## Git Status

git_fetch_random_status() {
    rid=$(($RANDOM % 6))
    [[ $rid == 0 ]] && git fetch origin
    git status
}
alias grps="git restore -p --staged"
alias gs="git_fetch_random_status"
alias gs.="git status ."
alias gss="git status -s"
alias gst="git status --untracked-files=no"
alias gsu="git ls-files --others --exclude-standard"
alias gsup="git standup"
alias gstup="git standup"
alias gfp="git fetch --prune"

## Git Add
alias gau="git add -u"
alias gaa="git add -A"
alias gap="git add -p"

## Git Reset

alias grhp="git reset HEAD -p"
alias grh="git reset HEAD"

## Git Restore
alias grs="git restore"
alias grss="git restore --staged"

## Git Log
alias gl="git log"
alias glp="git log -p"
alias glo="git log --oneline"
alias glo2='git log --oneline --date=relative --pretty=format:"%C(yellow)%h %Cblue%>(12)%ad %Cgreen%<(7)%aN%Cred%d %Creset%s"'
alias glo3='git log --oneline --graph --date=relative --pretty=format:"%C(auto,yellow)%h%C(auto,magenta)% G? %C(auto,yellow)%>(12,trunc)%ad %C(auto,green)%<(7,trunc)%aN%C(auto,reset)%s%C(auto,red)% gD% D"'
alias gg="git log --oneline --decorate --graph --all"
alias ggcb="git log --oneline --decorate --graph" # git current branch
alias ggb="git log --oneline --decorate --graph master.." # current branch only
alias ggbb="git log --oneline --decorate --graph --format=format:\"%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)\" --name-only master.." # current branch only
alias vgrog='vim $(git grog | fzf --reverse | tr -d "|")'


## Git Push/Pull
alias gpush="git push"
alias gpull="git pull"
alias gpl="git pull"
alias gpom="git push origin master"

## Git Commit
alias gc="git commit"
_gw() {
    git commit -m "$@"
}
alias gw=_gw
alias gcom="git commit"
alias sv="git commit -m"
alias gm="git commit -m"
alias gcim="git commit -m"
alias gqc="git commit -m" # git "quick commit"
alias gcv="git commit -v"
alias gd="git diff"
alias gd2="git diff2"

## Git Update
alias gupdate='cd ~/.dotfiles && git pull && cd -'

## Git etc

alias gcf="git clean -f -i"
alias gex="vim .git/info/exclude"


alias gds="git diff --staged"

## Git Branch/Checkout
alias gb="git branch"
alias gcm="git checkout master"
alias gco="git checkout"
alias gcb="git checkout -b"
alias gcp="git checkout -p"
alias gcmm="git checkout --"

## Git Rebaise
alias grm="git rebase master"

gri_run() {
    local commit="$1"
    git rebase -i ${commit}^
}
alias gri=gri_run

##################################################
# Vim related

alias vr="vim README*"
if command -v nvim > /dev/null; then
    alias v="nvim"
    alias vim="nvim"
else
    alias v="vim"
fi
alias e="emacs -nw"
alias b="TERM=xterm-24bit emacsclient -nw"
alias vn="vim --noplugin"
alias vimu="vim --noplugin"
# alias vimm="vim --noplugin" # comment it out in favor of vimm prog
alias js="jobs"
alias j="jobs"
alias f="fg"
alias vimrc="$EDITOR $HOME/.dotfiles/vim/vimrc"
#alias vs="if [[ -e './Session.vim' ]]; then vim -S ./Session.vim; else vim ; fi"

##################################################
# etc

alias rt="reset"
alias cl="clear"
#tablemanipulate
### http://unix.stackexchange.com/questions/29023/how-to-display-tsv-csv-in-console-when-empty-cells-are-missed-by-column-t
alias ctt="(sed ':x s/\(^\|\t\)\t/\1 \t/; t x' | column -ts$'\t')"


alias lsprefix='find . -maxdepth 1 -name "*${1}"'
alias lview="sed ':x s/\(^\|\t\)\t/\1 \t/; t x' | column -ts$'\t' | less -S"

##################################################
# Typo related

## common typo
alias Head='head'
alias grpe='grep'

##################################################
# Handy shortcuts

alias xcat='xargs cat'
alias xrm='xargs rm'
alias cutt='cut -d"	"'
alias cuts='cut -d" "'
alias cut1d='cut -f1 -d:'
alias colct="colc --delim '\t'"
alias suw='sort | uniq | wc'

##################################################
# Awk related

alias awkt='awk -F"\t"'
alias awkp1="awk '{print \$1}'"
alias awkp2="awk '{print \$2}'"
alias awk1p="awk '{print \$1}'"
alias awk2p="awk '{print \$2}'"
alias awk3p="awk '{print \$3}'"
alias awk4p="awk '{print \$4}'"
alias awk5p="awk '{print \$5}'"
alias awk6p="awk '{print \$6}'"
alias awk7p="awk '{print \$7}'"
alias awk8p="awk '{print \$8}'"
alias awk9p="awk '{print \$9}'"
alias awk10p="awk '{print \$10}'"

##################################################
# Tree related
alias treef='tree -f'  # Show path for each node
alias tree_d='tree -d' # tree directory
alias treed='tree -d' # tree directory
alias tree_ppt='tree -l -P "*.pptx|*.ppt" --prune -t -D'
alias tree_time='tree -D -t'
alias tree="tree --filelimit=20 -I '_cache_and_figs|figure-html|*_cache|*_files|*.Rproj'"

##################################################
# Find related

## Find files
function findf(){
    find $1 -type f
}

## Find crap vim produces
alias find_vimcrap='find . -name "*.swp" -o -name "*.swo" -o -name "*.un~"'

## List files by recency
alias find_recent='find . \( -path ./.git -o -path ./.Rproj.user \) -prune -o -type f -printf "%T+\t%p\n" | sort | egrep -v "\.git|\.Rproj.user|\.mypy_cache"'

## List files that changed last 30 minutes ago only
alias find_justnow='find . \( -path ./.git -o -path ./.Rproj.user \) -prune -o -type f -cmin -30 -printf "%T+\t%p\n" | sort'
alias fj='find . \( -path ./.git -o -path ./.Rproj.user \) -prune -o -type f -cmin -30 -printf "%T+\t%p\n" | sort'

##  Find files that have XXX init
alias find_xxx='find . -name "*.md" -o -name "*.R" -o -name "*.r" -o -name "*.rmd" -o -name "*.Rmd" | xargs -i ack -C 4 -H "XXX" {}'

alias find_dir1='find . -maxdepth 1 -type d -name "$@"'
alias find_dir2='find . -maxdepth 2 -type d -name "$@"'
alias find_dir3='find . -maxdepth 3 -type d -name "$@"'


alias lsdir='find . -type d | egrep -v ".git|.Rproj.user|.mypy" | sort'
alias lsdir1='find . -maxdepth 1 -type d -name "$@"'
alias lsdir2='find . -maxdepth 2 -type d -name "$@"'
alias lsdir3='find . -maxdepth 3 -type d -name "$@"'

alias lsf='find . -type f -name "$@"'
alias lsf1='find . -maxdepth 1 -type f -name "$@"'
alias lsf2='find . -maxdepth 2 -type f -name "$@"'
alias lsf3='find . -maxdepth 3 -type f -name "$@"'
alias find1='find . -maxdepth 1'

## Find fasta files
alias find_fasta='find -L -type f -name "*fa" -o -name "*fna" -o -name "*fasta" -o -name "*fa.gz" -o -name "*fasta.gz" -o -name "*fna.gz"'
alias find_fastq='find -L -type f -name "*fq" -o -name "*fastq" -o -name "*fastq.gz" -o -name "*fq.gz"'
alias find_R='find . -iname "*.R" -o -iname "*.Rmd"'
alias find_Rmd='find . -iname "*.Rmd"'
alias find_csv='find . -iname "*.csv" | grep -v .Rproj.user'
alias find_ppt='find . -type f -name "*.pptx" -o -name "*.ppt"'
alias find_xl='find . -type f -name "*.xlsx" -o -name "*.xls"'
alias find_xlsx='find . -type f -name "*.xlsx"'
alias find_png='find . -type f -name "*.png"'
alias find_empty='find . -not \( -path ./.git -prune \) -empty | grep -v .Rproj.user | grep -v _cache'

## Tmux Related
alias ta="tmux attach"
alias tmrw="tmux rename-window"
alias tmrs="tmux rename-session"
alias tp="tmuxp"
alias tall='tmux choose-window'

_makefile_init() {
  if [[ ! -e Makefile ]]; then
  echo "Initiating Makefile"
cat<<EOF > Makefile
SHELL := /bin/bash

help: ## Prints help for targets with comments
	@make_helper.sh

EOF
  else
    echo "Makefile already exists!"

  fi
}
## Makefile Related
alias mm_init=_makefile_init

_makefile_up() {
    if [[ $(jobs | grep Make | wc -l) == 1 ]]; then fg; else vim Makefile; fi
}
alias mm=_makefile_up
alias mmh="Makefile help"

datediff() {
    d1=$(date -d "$1" +%s)
    d2=$(date -d "$2" +%s)
    echo $(( (d1 - d2) / 86400 )) days
}

# Crontab stuff
alias crontab="VIM_CRONTAB=true crontab"

alias sbal="source ${HOME}/.dotfiles/bash/local/bash_aliases_local"
alias sbsl="source ${HOME}/.dotfiles/bash/local/bash_settings_local"
alias sbfl="source ${HOME}/.dotfiles/bash/local/bash_functions_local"
alias sbpl="source ${HOME}/.dotfiles/bash/local/bash_paths_local"

alias sbas="source ${HOME}/.dotfiles/bash/share/bash_aliases_share"
alias sbss="source ${HOME}/.dotfiles/bash/share/bash_settings_share"
alias sbfs="source ${HOME}/.dotfiles/bash/share/bash_functions_share"
alias sbps="source ${HOME}/.dotfiles/bash/share/bash_paths_share"

function vnote() {
    TODAY=$(date "+%Y-%m-%d")
    notepath="${INSIGHT_NOTEPATH}/${TODAY}.md"

    vim $notepath
}

# Vim calendar#
alias calv="vim -c 'Calendar -view=week'"
alias vcal="vim -c 'Calendar -view=week'"


# Update commands

alias update_gitconfig="cd $HOME/.dotfiles && make git_setup && cd -"

# if mac
if [[ $(get_platform) == mac ]]; then
    alias openh="open ."
fi

alias aa="source .venv/bin/activate"
alias ad="source deactivate"
alias al="alias | fzf"


alias ra="ranger"

alias R='R --no-save'
alias workflow="vim ~/.dotfiles/docs/workflow.md"
alias qs="qstat"
alias rgi="rg -i"


#alias b="bat"
alias hedit="vim $HOME/.bash_eternal_history"

alias opr="open $(find . -maxdepth 1 -type f -name '*Rproj')"
alias ip="curl https://ipinfo.io/ip"
alias o="open"
alias op="open"
alias h='hsearch'
alias hh='hsearch --here'
alias ht='hsearch --today'
alias hht='hsearch --here --today'
alias hhy='hsearch --here --yesterday'
alias fd2='fd --hidden -c never --no-ignore'
alias pdf="open -a 'PDF Expert'"
alias :q="exit"
alias vu="vim -u NONE"
alias rd="vim /Users/allee/Dropbox/vimwiki/2019-roadmap.md"
alias t="tmsu"
alias vimdo="vim - && ls xxx 2>/dev/null > /dev/null && cat xxx | bash && rm xxx"
alias gcmd="git commend"
alias gbr="git browse"
alias tmuxrc="vim $HOME/.tmux.conf"
alias fdf="fd -t f"
alias sda="source deactivate"
alias upp="unset PYTHONPATH"
alias em="emacs"


alias p="pbpaste"
command -v rpbcopy > /dev/null && alias pbcopy="rpbcopy"

alias chr="open -a 'Google Chrome'"

command -v hub > /dev/null 2>&1 && alias git="hub"
alias code="/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code --disable-gpu"
#alias ipython="ipython --TerminalInteractiveShell.editing_mode=vi"

alias hl="hledger"
alias hla="hledger add"
alias hle="nvim $LEDGER_FILE"
command -v bat > /dev/null 2>&1 && alias cat="bat"

alias cond="conda deactivate"
alias nvr_clean="rm /tmp/nvimsocket"

alias ipy="ipython --TerminalInteractiveShell.editing_mode=vi"
alias ipython="ipython --TerminalInteractiveShell.editing_mode=vi"

alias fd-analyses='fd "\.(py|ipynb|R|Rmd|md)$"'
alias fd-data='fd "\.(tsv|txt|csv|tar.gz|csv.gz)$"'
alias fd-plots='fd "\.(png|jpeg|pdf|html)$"'

alias xt="xsv table"
alias fd1="fd --maxdepth 1"
alias bpython="stty -ixon && bpython"
alias fdi="fd -i"

alias dr="direnv reload"
alias mcn="mamba create -n"
alias glow="glow -p" # tmp
alias gr="glow -p README.md"
alias kara="vim $HOME/.config/karabiner/karabiner.json"
alias sbs="delta --side-by-side"
alias 00="bat README.md"
alias 000="vim README.md"
alias ma="mamba activate"
alias meld='meld_script(){ /Applications/Meld.app/Contents/MacOS/Meld $* 2>/dev/null & };meld_script'
