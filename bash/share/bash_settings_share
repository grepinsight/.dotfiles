# TZ variable causing a numerous errors. unset it
unset TZ
declare -x VISUAL="vim"

#keyboard setting
set -o vi
bind -m vi-insert '"\C-x\C-e": edit-and-execute-command'

#Key rebindings
bind '"\e[A": history-search-backward'
bind '"\e[B": history-search-forward'
bind '"\eOC": forward-word'
bind '"\eOD": backward-word'
bind '"\C-o": "cd ..\nls -lh\n"'
bind '"\C-]": "cd -\nls -lh\n"'
bind Space:magic-space

#History
shopt -s histappend                                                       # Make bash append rather than overwrite the history on disk

HISTORY_DIRPATH=${HOME}/.history/$(date +%Y/%m)
if [[ ! -e $HISTORY_DIRPATH ]]; then
    echo "--> HISTORY_DIRPATH doesn't exist. Creating $HISTORY_DIRPATH..."

    mkdir -p $HISTORY_DIRPATH
fi

HOSTNAME="$(hostname)"
HOSTNAME_SHORT="${HOSTNAME%%.*}"
export HISTFILE=$HISTORY_DIRPATH"/$(date +%d.%H.%M.%S)_${HOSTNAME_SHORT}_$$"
export HISTFILESIZE=
export HISTSIZE=
export HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups                # Don't put duplicate lines in the history.


#Unify histories across screen sessions
export PROMPT_COMMAND="history -a; history -n"

# Use eternal history - https://debian-administration.org/article/543/Bash_eternal_history
export HISTTIMEFORMAT="%s "
PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND ; }"'echo $$ $USER $(date "+%Y-%m-%d %H:%M:%S") \
				"@ $(pwd -P) | " \
               "$(history 1)" >> ~/.bash_eternal_history'
#PROMT & LS
# default prompt
COLOR_PS1="\e[1;36m"
PS1="\$(git-radar --bash --fetch)|${COLOR_PS1}[\!][\d,\@] \u@\[\033]0;\h:\W\007\]\h: \w] \e[m\n \[\e]1;ibm\a\] ===> "
#LS_COLORS="*notes=01;35:$LS_COLORS:di=00;33"


#man page colorizer
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'

# When changing directory small typos can be ignored by bash. for example, cd /vr/lgo/apaache would find /var/log/apache
shopt -s cdspell

#Add current path to the path
PATH=$PATH:.

#For sqlite
#stty erase ^H

# To make tmux color work in Vim
export TERM="xterm-256color"


# custom global option for fc
if [[ -e $HOME/.fdrc ]]; then
    source $HOME/.fdrc
fi

[ -f ~/.fzf.bash ] && source ~/.dotfiles/fzf/fzf.bash


SESSION_TYPE=$(cat /proc/$PPID/status 2>/dev/null | head -1 | cut -f2)
# tmux specific setting
if [[ $SESSION_TYPE == "tmux" ]]; then
	export TERM=screen-256color
fi


# FZF
[ -f ~/.fzf.bash  ] && source ~/.fzf.bash
export FZF_DEFAULT_COMMAND="fd . $HOME"
export FZF_CTRL_T_COMMAND="fd ."
export FZF_CTRL_T_COMMAND_CURRENT="fd ."
alias fzf_all="export FZF_CTRL_T_COMMAND=\"fd . $HOME\""
alias fa="export FZF_CTRL_T_COMMAND=\"fd . $HOME\""
alias fzf_pwd="export FZF_CTRL_T_COMMAND=\"fd . \""
alias fp="export FZF_CTRL_T_COMMAND=\"fd . \""
alias fzf_all_all="export FZF_CTRL_T_COMMAND=\"fd --hidden --no-ignore . $HOME\""
alias fzf_pwd_all="export FZF_CTRL_T_COMMAND=\"fd --hidden --no-ignore . \""
export FZF_ALT_C_COMMAND="fd . $HOME"

# bashmarks
[ -f ~/.local/bin/bashmarks.sh ] && source ~/.local/bin/bashmarks.sh


# Completions

if [[ -e /usr/share/bash-completion/completions/git ]]; then
    source /usr/share/bash-completion/completions/git
fi

# Add completion function for makefile: http://stackoverflow.com/a/38415982/1058663
complete -W "\`grep -oE '^[.a-zA-Z0-9_-]+:([^=]|$)' Makefile | sed 's/[^a-zA-Z0-9_-]*$//'\`" make



_vim_ctags() {
    local cur prev

    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"

    case "${prev}" in
        -t)
            # Avoid the complaint message when no tags file exists
            if [ ! -r ./tags ]
            then
                return
            fi

            # Escape slashes to avoid confusing awk
            cur=${cur////\\/}

            COMPREPLY=( $(compgen -W "`awk -v ORS=" "  "/^${cur}/ { print \\$1 }" tags`" ) )
            ;;
        *)
            # Perform usual completion mode
            ;;
    esac
}

# Files matching this pattern are excluded
excludelist='*.@(o|O|so|SO|so.!(conf)|SO.!(CONF)|a|A|rpm|RPM|deb|DEB|gif|GIF|jp?(e)g|JP?(E)G|mp3|MP3|mp?(e)g|MP?(E)G|avi|AVI|asf|ASF|ogg|OGG|class|CLASS)'

complete -F _vim_ctags -f -X "${excludelist}" vi vim gvim rvim view rview rgvim rgview gview nvim

