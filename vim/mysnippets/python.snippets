snippet code "spinx-code" b

.. code

    ${0}

endsnippet


snippet main_defopt "main_defopt" b
def main(argv: List[str] = sys.argv[1:]) -> None:
    defopt.run(funcs=[cloud_plot], argv=argv)
endsnippet
snippet pickle "Description" b
with open("${2}.pkl", "wb") as fp:
    pickle.dump(${1}, fp)
${0}
endsnippet
snippet pd "Description" b
with open("${2}.pkl", "wb") as fp:
    pickle.dump(${1}, fp)
${0}
endsnippet

snippet pl "Description" b
with open("${1}.pkl", "wb") as fp:
    pickle.load(fp)
${0}
endsnippet
snippet main
if __name__ == '__main__':
	defopt.run(main)
endsnippet

snippet pdb
import pdb; pdb.set_trace()
endsnippet

snippet ipdb
import ipdb; ipdb.set_trace()
endsnippet

snippet make_parser
def make_parser():
    from argparse import ArgumentParser
    parser = ArgumentParser()
    parser.add_argument("--input-dir",
                        dest="input_dir",
                        help="Input Directory")
    parser.add_argument("--output-path",
                        dest="output_path",
                        help="Output Path")
    parser.add_argument("--variable",
                        dest="variable",
                        help="variable to compute trace",
                        default=r'.*?-\w{6}\.trace\.csv')

if __name__ == "__main__":
    parser = make_parser()
    args = parser.parse_args()
endsnippet


snippet pymc3
import pymc3 as pm
import pymc3.diagnostics as pm_diag
import pymc3.distributions as pm_dist
import numpy as np

import matplotlib
matplotlib.use('TkAgg')
import matplotlib.pyplot as plt

# data

# model
with pm.Model() as model:
    theta = pm.Beta('theta', alpha=1, beta=1)
    coin = pm.Bernoulli('coin', p=theta, observed=coin_flips)

    trace = pm.sample(100)

pm.summary(trace)
pm.traceplot(trace)
endsnippet


snippet skip "Description" b
@pytest.mark.skip(reason="$1")
endsnippet

snippet docg "Glossary"
    .. glossary::

        ${1:term}
            ${2: description}

endsnippet

snippet !sci "Science Stack" b
import numpy as np
import pandas as pd
import scipy.stats as stats
endsnippet


snippet arg "Argument Parser" b
parser = argparse.ArgumentParser(description='A command line interface for $1')
parser.add_argument("-o", "--outdir",
                 action="store",
                 dest="outdir",
                 type=str,
                 help="help message",
                 required=True,
                 metavar="STR")
endsnippet


snippet !alt "Altair plot structure" b
(alt.Chart($1)
  .mark_point()
  .encode(
    x=$2,
    y=$3
    )
  .properties(
    height=300,
    width=300,
    title=$4
  )
)
endsnippet

snippet !alt_setup "setup altair" b
alt.data_transformers.enable('default')
alt.data_transformers.disable_max_rows()
endsnippet

snippet !alt_hist "Altair Histogram" b
  .mark_bar()
  .encode(
    x=alt.X('test', bin=alt.Bin(extent=[0, 5000], step=100)),
    y='count()',
    )
endsnippet


snippet !alt_con "Description" b
.properties(title="PLOT_TITLE")
.configure_title(fontSize=20)
.configure_axis(titleFontSize=20)
.configure_header(titleFontSize=14, labelFontSize=14)
.configure_legend(titleFontSize=20, labelFontSize=20)
endsnippet


snippet !pd_ex "Pandas Example" b
import pandas as pd
import altair as alt

a = pd.DataFrame({'a': [1,2,3,4]})
alt.Chart(a).mark_bar().encode(x='a', y='count()')
endsnippet


snippet !init_version "Init Version" b
import pkg_resources

try:
    __version__ = pkg_resources.get_distribution('$1').version
except pkg_resources.DistributionNotFound:  # pragma: no cover
    __version__ = None
endsnippet

snippet anno "Description" b
from __future__ import annotations
endsnippet


snippet !luigit! "luigi task" b
class TaskName(luigi.Task):
    def requires(self):
        pass
    def run(self):
        pass
    def output(self):
        pass
endsnippet

snippet """ "Description" bA
"""${1:doc}"""
endsnippet

snippet colorama "Description" b
from colorama import Fore, Back, Style
endsnippet


snippet logging "Description" b
import logging

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)
endsnippet

snippet syse "Sys exit snippet" b
import sys
sys.exit(1)
endsnippet

snippet yapf "Description" b
# yapf: disable
# yapf: enable
endsnippet

snippet defs "Description" b
def __str__(self):
    return f"{$0}"
endsnippet

snippet @api "Description" b
 # from rest_framework.decorators import api_view

@api_view(['${1:GET}'])
def ${2:hello_world}(request):
    return Response({"message": "Hello, world!"})
endsnippet


snippet !sms "Description" b
class ${1}Serializer(serializers.ModelSerializer):
    class Meta:
        model = ${1}
        fields = ${2:"__all__"}
endsnippet

