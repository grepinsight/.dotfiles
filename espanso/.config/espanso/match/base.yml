# Automatically generated by espanso migration tool
# Original file: default.yml

matches:
  - trigger: ;ll
    label: "SQL line"
    replace: "---------------------------"
  - trigger: ;ll
    label: "Python Line"
    replace: "# -------------------------"
  - trigger: ;scratch
    replace: |
      # ---- Scratch Pad Start
      $|$
      # ---- Scratch Pad End
  - trigger: ;fence
    replace: |
      # ---- Scratch Pad Start
      $|$
      # ---- Scratch Pad End
  - trigger: ;morning
    replace: |
      - [ ] Vitamin
  - trigger: ";lens"
    replace: "üîç"
  - trigger: ;ai
    replace: "%reload_ext jupyter_ai"
  - trigger: ;tt
    replace: "- [ ] "
  - trigger: ;td
    replace: "- [ ] "
  - trigger: "-tt"
    replace: "- [ ] "
  - trigger: ";tx"
    replace: "- [x] "
  - trigger: ";rr"
    replace: "```{r}\n"
  - trigger: ";hi"
    replace: "# XXX: DELETEME(allee)"
  - trigger: ";del"
    replace: "# XXX: DELETEME(allee)"
  - trigger: "note(al"
    replace: "note(allee): "
  - trigger: ";note"
    replace: "note(allee): "
  - trigger: ";nt"
    replace: "note(allee): "
  - trigger: ";nn"
    replace: "note(allee): "
  - trigger: ";„Öî1"
    replace: "Please rewrite the text to make it as simple and clear as possible: "
  - trigger: ";p1"
    replace: "Please rewrite the text to make it as simple and clear as possible: "
  - trigger: ";yes"
    replace: "{{mytime}}"
    vars:
      - name: mytime
        type: date
        params:
          format: "%Y-%m-%d"
          offset: -86400
  - triggers:
      - ;beginal
      - $$b
    label: "[Latex] Begin align"
    replace: |
      $$
      \begin{align}
      $|$
      \end{align}
      $$
  - trigger: ;right-arrow
    replace: "‚û°Ô∏è "
  - trigger: ;ra
    replace: "‚û°Ô∏è "
  - trigger: ;heartex
    replace: ‚ù£Ô∏è
  - trigger: ":star:"
    replace: ‚≠ê
  - trigger: ;finished
    replace: "finished on {{mydate}}"
    vars:
      - name: mydate
        type: date
        params:
          format: "%Y-%m-%d"
  - trigger: ;iso
    replace: "{{mydate}}"
    vars:
      - name: mydate
        type: date
        params:
          format: "%Y-%m-%dT%H:%M:%S"
  - trigger: ;2date
    replace: "{{mydate}}"
    vars:
      - name: mydate
        type: date
        params:
          format: "%Y%m%d"
  - trigger: ;3date
    replace: "{{mydate}}"
    vars:
      - name: mydate
        type: date
        params:
          format: "%Y_%m_%d"
  - trigger: ;dow
    replace: "{{mydate}}"
    vars:
      - name: mydate
        type: date
        params:
          format: "%A"
  - trigger: ;2dow
    replace: "{{mydate}}"
    vars:
      - name: mydate
        type: date
        params:
          format: "%a"
  - trigger: "@pgra"
    replace: "@pgrauman-gh"
  - trigger: ;smart!
    replace: |
      - Specific:
      - Measurable:
      - Attainable:
      - Relevant:
      - Time-bound:
  - trigger: ;time
    replace: "{{mydate}}"
    vars:
      - name: mydate
        type: date
        params:
          format: "%I:%M %p"
  - trigger: ;2time
    replace: "{{mydate}}"
    vars:
      - name: mydate
        type: date
        params:
          format: "%H:%M"
  - trigger: ;uuid
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: /Users/allee/src/productivity/uuidgen-short
  - trigger: ;uuid2;
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: uuidgen
  - trigger: ":org-note-init"
    replace: |
      * What is X?
      * Why is X important?
  - trigger: ":espanso"
    replace: Hi there!
  - trigger: ;ju-ex
    replace: |
      # DRAFT:
      $|$
  - trigger: ;reload
    replace: |
      %load_ext autoreload
      %autoreload 2
  - trigger: ;ju-s-ld
    replace: |
      import os
      next(os.walk('.'))[1]
  - trigger: ";dp"
    replace: display({{clipboard}})
    vars:
      - name: "clipboard"
        type: "clipboard"
  - triggers: [";all_cols", ";max_cols", ";all-cols", ";max-cols"]
    replace: |-
      with pd.option_context("display.max_columns", None):
      $|$
  - triggers: [";all_rows", ";max_rows", ";all-rows", ";max-rows"]
    replace: |-
      with pd.option_context("display.max_rows", 2000):
      $|$

  - trigger: ;ju-init
    replace: |
      from pathlib import Path

      import numpy as np
      import pandas as pd

      PRJ_DIR = Path.cwd()
      print(f'- Project directory: {PRJ_DIR}')
      DATA_DIR = PRJ_DIR / "data"

      IN_DATA_DIR = DATA_DIR / "input"
      INTERMEDIATE_FILES_DATA_DIR = DATA_DIR / "intermediate_files"
      OUT_DATA_DIR = DATA_DIR / "output"
  - trigger: ;alt-int!
    replace: |
      _sel = alt.selection_single(on='mouseover', nearest=True, fields=[COL_TO_AFFECT])
      stroke = alt.condition(_sel, alt.value('black'), alt.value('grey'))
  - trigger: ;alt-ex
    replace: |
      import pandas as pd
      import altair as alt

      a = pd.DataFrame({'a': [1,2,3,4]})
      alt.Chart(a).mark_bar().encode(x='a', y='count()')
  - trigger: ;alt-p43!
    replace: ".properties(width=400, height=300)"
  - trigger: ;alt-scale!
    replace: ".resolve_scale(x = 'independent', y = 'independent')"
  - trigger: ;alt-index!
    replace: "_plottable = ''\n_x = ''\n_y = ''\n_cols_to_sort = ''\n_sort = _plottable.sort_values(_cols_to_sort)[_x].tolist()\n\n(alt.Chart(_plottable, title=\"\")\n  .mark_point()\n  .encode(x=alt.X(_x, sort=_sort, axis=alt.Axis(ticks=False, labels=False)), y=_y, color=_cols_to_sort[0])\n)\n"
  - trigger: ;alt!
    replace: "(alt.Chart($|$, title=\"\")\n  .mark_point()\n  .encode(x='', y='')\n)\n"
  - trigger: ;alt-save
    replace: "with alt.data_transformers.enable(\"default\"):\n    chart.save(\"chart.html\")\n"
  - trigger: ;alt-hist!
    replace: "(alt.Chart($|$, title=\"\")\n  .mark_bar()\n  .encode(x=alt.X('', bin=True), y='count()')\n)\n"
  - trigger: ;alt-geom-hist
    replace: ".mark_bar().encode(x=alt.X('$|$', bin=True), y='count()')"
  - trigger: ;alt-geom-pts
    replace: ".mark_point().encode(x='', y=alt.Y('$|$'))"
  - trigger: ;alt-mark-list
    replace: |
      mark_point()
      mark_line(point=True)
  - trigger: ;alt-more
    replace: "(\n alt.Chart('$|$')\n  .mark_point()\n  .encode(x='',\n          y=''\n          tooltip='',\n          color='',\n          stroke='',\n          opacity=''\n          )\n)\n"
  - trigger: ;ju-mat-init
    replace: |
      # Matplotlib Visualization settings
      import matplotlib.pyplot as plt
  - trigger: ;ju-alt-init
    replace: |
      # Visualization settings
      import altair as alt
      import analysis_utils
      analysis_utils.plots.enable_json_transformer(verbose=False)

      import althemes
  - trigger: facet=
    replace: "facet=alt.Facet('$|$', columns=3)"
  - trigger: ":wtf"
    image_path: /Users/allee/Dropbox/vimwiki/shared/images/wtf-is-all.gif
  - trigger: ;dash50
    replace: "--------------------------------------------------"
  - trigger: ;cdash50
    replace: "# --------------------------------------------------"
  - trigger: ":ggg"
    form: |
      Hey [[name]],
      Happy Birthday!
  - trigger: ;ju-pyspark-init
    replace: |
      from pyspark.sql import Column
      from pyspark.sql import DataFrame
      from pyspark.sql import SQLContext
      from pyspark.sql import Window
      from pyspark.sql import functions as F
  - trigger: ;lorem
    replace: "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
  - regex: ":hi\\((?P<name>.*?)\\)"
    replace: "Hey {{name}}!"
  - triggers:
      - ;;r
    label: "[Latex] math R"
    replace: \mathbb{R}
  - triggers:
      - ;bmat
    label: "[Latex] bmatrix environment"
    replace: |
      \begin{bmatrix}
      $|$
      \end{bmatrix}
  - trigger: ;ex-ov
    replace: |
      ... =  0  1  2  3  4
  - trigger: ;ex-sharr
    replace: arr = [5, 1, 3, 0, 1, 4]
  - trigger: ;ex-arr
    replace: |
      arr = [1, 2, 3, 4, 5]$|$
  - trigger: ;gpt-rewrite
    replace: |
      Rewrite this more attractively and clearly:
  - trigger: ;gpt-pg
    replace: |
      Rewrite this more attractively with the tone of Paul Graham: (but make sure to keep the phrases such as $|$):
  - trigger: ;gpt-reorg
    replace: |
      Here's the dump of ideas. Organize this into a clear, coherent chain of thoughts and turn this into well-written writing:
  - trigger: ":quote"
    replace: "{{output}}"
    vars:
      - name: output
        type: choice
        params:
          values:
            - "Every moment is a fresh beginning."
            - "Everything you can imagine is real."
            - "Whatever you do, do it well."
  - trigger: ";bb"
    replace: |-
      ```bash
      {{clipboard}}$|$
      ```
    vars:
      - name: "clipboard"
        type: "clipboard"
  - trigger: ";pp"
    replace: |-
      ```python
      {{clipboard}}$|$
      ```
    vars:
      - name: "clipboard"
        type: "clipboard"
  - trigger: ";configj"
    replace: |-
      %config InteractiveShell.ast_node_interactivity="last_expr_or_assign"
    vars:
      - name: "clipboard"
        type: "clipboard"
  - trigger: ";greet"
    form: |
      Hey [[name]],
      Happy Birthday!
  # - trigger: ;project_desc
  #   form: |
  #     In this project, we will be working on [[project_name]].
  #     The goal of this project is to [[project_goal]].
  #     We will be using [[project_tools]] to accomplish this.
  #     The project will be completed by [[project_deadline]].
  - trigger: ;project_desc
    form: |
      ## Project Overview
      - **Project Name**: [[project_name]]
      - **Goal**: [[project_goal]]
        - Why is this project important?
        - Who are the stakeholders?
        - What are the success metrics?
      - **Background and Rationale**: [[project_background]]
      - **Expected Outcomes**: [[expected_outcomes]]

      ## Technical Details
      - **Tools and Technologies**: [[project_tools]]
      - **Data Sources**: [[data_sources]]
      - **Methodology**: [[methodology]]
      - **Dependencies**: [[dependencies]]
      - **Version Control**: [[version_control]]

      ## Organization
      - **Team Members and Roles**: [[team_members]]
      - **Deadline**: [[project_deadline]]
      - **Milestones**: [[milestones]]
      - **Challenges and Solutions**: [[challenges_solutions]]

      ## Additional Resources
      - **References and Resources**: [[references_resources]]

      ## Progress Tracking
      - **Updates and Notes**: [[progress_notes]]
  - trigger: ;tyc
    replace: Thank you for clarification
  - trigger: ;journal
    replace: |

      ## Best Thing That Happend Today

      ## What I am Thankful for

      ## Today I Learned

      ## Today I helped

      #gratitude #thankful #Í∞êÏÇ¨ÎÖ∏Ìä∏ #journal


  - trigger: diffbw
    replace: difference between $|$
  - trigger: Difference b
    replace: Difference between $|$
  - trigger: \tex
    replace: \text{$|$}
  - trigger: ;question
    replace: |
        - what:
        - who:
        - where:
        - when:
        - why:
        - how:
  - trigger: "pv\t"
    replace: print(f"{$|$ = }")
  - trigger: ";pv"
    replace: print(f"{$|$ = }")
  - trigger: "pvv\t"
    replace: print(f"{$|$ = }")
  - trigger: ":localip"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: "curl https://ipinfo.io/ip"
  - trigger: "wi\t"
    replace: "What is $|$?"
  - trigger: "wiq\t"
    replace: 'What is "$|$"?'
  - trigger: "wm\t"
    replace: 'What does $|$ mean?'
  - trigger: "wmq\t"
    replace: 'What does "$|$" mean?'
  - trigger: "wd\t"
    form: |-
      What is the difference between [[field1]] and [[field2]]?
  - trigger: ;print
    replace: print('test')
  - trigger: ;jt-hide
    replace: '# + jupyter={"source_hidden": true}'
  - trigger: ";.task"
    replace: "#### Task"
  - trigger: ";.data"
    replace: "#### Data"
  - trigger: ;rocket
    replace: "## üöÄ"
  - trigger: ;mpl
    replace: import matplotlib.pyplot as plt
  - trigger: ;fax
    replace: fig, ax = plt.subplots(figsize=(14, 8))
  - trigger: ;xlab
    replace: ax.set_xlabel('$|$')
  - trigger: ;ylab
    replace: ax.set_ylabel('$|$')
  - trigger: ;savf
    replace: fig.savefig('$|$.png', dpi=300)
  - trigger: ;pscatter
    replace: ax.scatter(x, y, marker='o')
  - trigger: ;ptitle
    replace: ax.set_title('$|$')
  - trigger: ;pbar
    replace: ax.bar(x, height)
  - trigger: ;phist
    replace: ax.hist(data, bins=10)
  - trigger: ;ptight
    replace: plt.tight_layout()
