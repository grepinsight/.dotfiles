[alias]
    recentb = "!r() { refbranch=$1 count=$2; git for-each-ref --sort=-committerdate refs/heads --format='%(refname:short)|%(HEAD)%(color:yellow)%(refname:short)|%(color:bold green)%(committerdate:relative)|%(color:blue)%(subject)|%(color:magenta)%(authorname)%(color:reset)' --color=always --count=${count:-20} | while read line; do branch=$(echo \"$line\" | awk 'BEGIN { FS = \"|\" }; { print $1 }' | tr -d '*'); ahead=$(git rev-list --count \"${refbranch:-origin/master}..${branch}\"); behind=$(git rev-list --count \"${branch}..${refbranch:-origin/master}\"); colorline=$(echo \"$line\" | sed 's/^[^|]*|//'); echo \"$ahead|$behind|$colorline\" | awk -F'|' -vOFS='|' '{$5=substr($5,1,70)}1' ; done | ( echo \"ahead|behind||branch|lastcommit|message|author\\n\" && cat) | column -ts'|';}; r"
    br = for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'

    find = log --date=relative --pretty=\"format:%h %ad %Cgreen%H %Cblue%s\" --name-status --grep
    cp = cherry-pick
    releasenotes = "!git log $(git describe HEAD~ --tags --abbrev=0)..HEAD --pretty='format:* %h %s%n  * %an <%ae>' --no-merges"
    cleanable = "!git branch --merged | egrep  -v '^master|dev|main' | awk '{print $1}'"
    cleanable-execute = "!git branch --merged | egrep  -v '^master|dev|main' | awk '{print $1}' | xargs -n 1 git branch -d"
    recentb = "!r() { refbranch=$1 count=$2; git for-each-ref --sort=-committerdate refs/heads --format='%(refname:short)|%(HEAD)%(color:yellow)%(refname:short)|%(color:bold green)%(committerdate:relative)|%(color:blue)%(subject)|%(color:magenta)%(authorname)%(color:reset)' --color=always --count=${count:-20} | while read line; do branch=$(echo \"$line\" | awk 'BEGIN { FS = \"|\" }; { print $1 }' | tr -d '*'); ahead=$(git rev-list --count \"${refbranch:-origin/master}..${branch}\"); behind=$(git rev-list --count \"${branch}..${refbranch:-origin/master}\"); colorline=$(echo \"$line\" | sed 's/^[^|]*|//'); echo \"$ahead|$behind|$colorline\" | awk -F'|' -vOFS='|' '{$5=substr($5,1,70)}1' ; done | ( echo \"ahead|behind||branch|lastcommit|message|author\\n\" && cat) | column -ts'|';}; r"
    recentdev = "!r() { refbranch=$1 count=$2; git for-each-ref --sort=-committerdate refs/heads --format='%(refname:short)|%(HEAD)%(color:yellow)%(refname:short)|%(color:bold green)%(committerdate:relative)|%(color:blue)%(subject)|%(color:magenta)%(authorname)%(color:reset)' --color=always --count=${count:-20} | while read line; do branch=$(echo \"$line\" | awk 'BEGIN { FS = \"|\" }; { print $1 }' | tr -d '*'); ahead=$(git rev-list --count \"${refbranch:-origin/dev}..${branch}\"); behind=$(git rev-list --count \"${branch}..${refbranch:-origin/dev}\"); colorline=$(echo \"$line\" | sed 's/^[^|]*|//'); echo \"$ahead|$behind|$colorline\" | awk -F'|' -vOFS='|' '{$5=substr($5,1,70)}1'; done | ( echo \"ahead|behind||branch|lastcommit|message|author\\n\" && cat) | column -ts'|';}; r"
    br = for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'
    tree = log --graph --decorate --pretty=oneline --abbrev-commit
    st = status -sb
    s = status -sb
    prune = fetch --prune
    ci = commit
    cc = commit
    com = commit
    cm = commit
    co = checkout
    rs = restore
	grog = log --graph --abbrev-commit --decorate --all --format=format:\"%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)\" --name-only
    graph = log --all --graph --pretty=format:'%C(auto)%h%C(auto)%d %s %C(dim white)(%aN, %ar)'
	please = push --force-with-lease
	commend = commit --amend --no-edit
	delete-local = branch -d

    cob = checkout -b
    drymerge = merge --no-commit --no-ff
    g = grep --break --heading --line-number
	it = !git init && git commit -m “root” --allow-empty
	stsh = stash --keep-index
	staash = stash --include-untracked
	staaash = stash --all
	shorty = status --short --branch
	merc = merge --no-ff
    addf = add --force
    diffs = diff --staged
	ls = log --pretty=format:'%C(magenta)%h%Creset %C(dim)%cr%Creset  %C(yellow)%aN%Creset %s %C(cyan)%d%Creset'
	aliases = !git config --get-regexp ^alias\\. | sed -e s/^alias.// -e s/\\ /\\ $(printf \"\\043\")--\\>\\ / | column -t -s $(printf \"\\043\") | sort -k 1

    switch = "!f() { git switch $1 2>/dev/null || git switch -c $1; }; f"

    # From Jeff
    undo = reset --soft HEAD^
    su = !git branch --set-upstream-to=origin/$(git rev-parse --abbrev-ref HEAD) $(git rev-parse --abbrev-ref HEAD)
    pbme = !git push -u $(whoami) $(git rev-parse --abbrev-ref HEAD)
    pb = !git push -u origin $(git rev-parse --abbrev-ref HEAD)
    pblee = !git push -u allee $(git rev-parse --abbrev-ref HEAD)
    pbgrep = !git push -u grepinsight $(git rev-parse --abbrev-ref HEAD)
    plb = !git pull origin $(git rev-parse --abbrev-ref HEAD)
    plbgrep = !git pull grepinsight $(git rev-parse --abbrev-ref HEAD)
    lol = log --graph --decorate --pretty=oneline --abbrev-commit
    bhist = ! git reflog | egrep -io 'moving from ([^[:space:]]+)' | awk '{ print $3 }' | head

    brmr = push origin --delete
    brm = branch -d
    frbi = "!f() { git rebase -i $(git log --pretty=oneline --color=always | fzf --ansi | cut -d ' ' -f1)^ ; }; f"
    l = "!. ~/.dotfiles/git/githelpers && pretty_git_log"
    la = "!git l --all"
    lr = "!git l -30"
    lra = "!git lr --all"
    lg = "!git l -G $1 -- $2"
[merge]
    tool = vimdiff
[core]
    editor = nvim
	excludesfile = ~/.dotfiles/git/exclude
[color]
	ui = true
[push]
    default = simple
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22
[color "diff"]
	meta = yellow
	frag = magenta bold
	commit = yellow bold
	old = red bold
	new = green bold
	whitespace = red reverse
[pull]
    rebase = false
[commit]
	verbose = true
    template = ~/.dotfiles/git/gitmessage
[pager]
    diff = delta
    log = delta
    reflog = delta
    show = delta

[interactive]
    diffFilter = delta --color-only

[delta]
    features = line-numbers decorations navigate
    #features = side-by-side line-numbers decorations navigate
    whitespace-error-style = 22 reverse
    wrap-max-lines = 4
    navigate = true

[delta "decorations"]
    commit-decoration-style = bold yellow box ul
    file-style = bold yellow ul
    file-decoration-style = none
[init]
	defaultBranch = main
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[credential "https://github.com"]
	helper =
	helper = !/opt/homebrew/bin/gh auth git-credential
[credential "https://gist.github.com"]
	helper =
	helper = !/opt/homebrew/bin/gh auth git-credential
